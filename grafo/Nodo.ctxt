#BlueJ class context
comment0.params=estado\ custo
comment0.target=Nodo(Estado,\ double)
comment0.text=\r\n\ Construtor\ para\ a\ class\ Nodo\r\n\ @param\ estado\ \ Estado\ que\ vai\ pretencer\ ao\ nodo\r\n\ @param\ custo\ Custo\ que\ a\ viagem\ tem\ de\ um\ Nodo\ para\ outro\r\n
comment1.params=sucessores\ nEstado\ nCusto
comment1.target=void\ adicionar(java.util.List,\ Estado,\ double)
comment1.text=\r\n\ Adiciona\ um\ nodo\ filho\ a\ este\ nodo\r\n\ @param\ sucessores\ \ \ \ Lista\ de\ sucessores,\ onde\ o\ novo\ filho\ vai\ ser\ adicionado\r\n\ @param\ nEstado\ \ Nodo\ que\ vai\ ter\ este\ nodo\ como\ pai,\ filho\ deste\ nodo\r\n\ @param\ nCusto\ \ \ Novo\ cusro\ do\ caminho\ de\ um\ Nodo\ para\ outro\r\n
comment2.params=
comment2.target=java.util.ArrayList\ getSuc()
comment2.text=\r\n\ Estado\ encontra\ o\ proximo\ sucesor\ valido\r\n\ @return\ Lista\ de\ sucessores\r\n
comment3.params=
comment3.target=boolean\ isFinal()
comment3.text=\r\n\ Pede\ para\ verifica\ se\ o\ estado\ \u00E9\ final\r\n
comment4.params=
comment4.target=Nodo\ getNodoPai()
comment4.text=\r\n\ Estado\ encontra\ o\ proximo\ sucesor\ valido\r\n\ @return\ Pai\ deste\ Nodo\r\n
comment5.params=novoNodo
comment5.target=void\ setEstadoPai(Nodo)
comment5.text=\r\n\ Estado\ encontra\ o\ proximo\ sucesor\ valido\r\n\ @return\ Lista\ de\ sucessores\r\n
comment6.params=
comment6.target=java.lang.String\ toString()
comment6.text=\r\n\ Override\ do\ toString\r\n\ Apresenta\ de\ forma\ clara\ o\ estado\r\n
numComments=7
